#include <gtest/gtest.h>

#include <System.hpp>
#include <AlmostEqual.hpp>
#include <iostream>

using namespace std;

static Matrix<5, 5> A                  = {{
    {-1, -2, -3, -5, -7},
    {11, 13, 17, 19, 23},
    {29, 31, 37, 41, 43},
    {47, 53, 59, 61, 67},
    {71, 73, 79, 83, 89},
}};
static Matrix<5, 2> B                  = {{
    {2957, 2963},
    {3137, 3163},
    {3313, 3319},
    {3467, 3469},
    {3617, 3623},
}};
static Matrix<3, 5> C                  = {{
    {5647, 5651, 5653, 5657, 5659},
    {5807, 5813, 5821, 5827, 5839},
    {5981, 5987, 6007, 6011, 6029},
}};
static Matrix<3, 2> D                  = {{
    {727, 733},
    {859, 863},
    {1009, 1013},
}};
static CTLTISystem<5, 2, 3> continuous = {A, B, C, D};

TEST(System, discretizeTustin) {
    DTLTISystem<5, 2, 3> discrete =
        continuous.discretize(0.001, DiscretizationMethod::Bilinear);

    auto Ad = discrete.A;
    auto Bd = discrete.B;
    auto Cd = discrete.C;
    auto Dd = discrete.D;

    cout << "Ad = " << Ad << endl;
    cout << "Bd = " << Bd << endl;
    cout << "Cd = " << Cd << endl;
    cout << "Dd = " << Dd << endl;

    Matrix<5, 5> A_expected = {{
        {
            0.99853367472732302,
            -0.00249600331096629,
            -0.00355053078743334,
            -0.00557949339373221,
            -0.00762618664598806,
        },
        {
            0.01275123990328030,
            1.01486779762512658,
            0.01908815184790494,
            0.02120039750644017,
            0.02537619980557108,
        },
        {
            0.03253922255304589,
            0.03478319805502310,
            1.04124008504603816,
            0.04546592323575886,
            0.04782406044540538,
        },
        {
            0.05248948578915771,
            0.05886599056850944,
            0.06558151254439702,
            1.06793597623137493,
            0.07449409043927935,
        },
        {
            0.07836418488789647,
            0.08086964042652471,
            0.08782971201402996,
            0.09229826214015921,
            1.09904349221119246,
        },
    }};
    Matrix<5, 2> B_expected = {{
        {
            2.92157159229440877,
            2.92749563562985493,
        },
        {
            3.29343611873385456,
            3.31982224727515796,
        },
        {
            3.64928587881744715,
            3.65614833641953263,
        },
        {
            3.99806236383229585,
            4.00147325295223677,
        },
        {
            4.34431458940090653,
            4.35225390515593169,
        },
    }};
    Matrix<3, 5> C_expected = {{
        {
            6141.05854318043475359,
            6179.59930805368549045,
            6247.48522812608916865,
            6282.97229707914084429,
            6335.29271742370292486,
        },
        {
            6316.22176521723122278,
            6357.80758486977538269,
            6433.69059575417850283,
            6472.14370892974875460,
            6536.00122774003466475,
        },
        {
            6506.50333074448008119,
            6549.21705536704757833,
            6639.25501849113788921,
            6676.74950316508329706,
            6748.25570458681795571,
        },
    }};
    Matrix<3, 2> D_expected = {{
        {
            52197.12520761279301951,
            52345.91448038077214733,
        },
        {
            53866.98288840628811158,
            54017.96427148466318613,
        },
        {
            55677.60376946142787347,
            55833.10238284583465429,
        },
    }};

    ASSERT_TRUE(isAlmostEqual(Ad, A_expected, 1e-10));
    ASSERT_TRUE(isAlmostEqual(Bd, B_expected, 1e-10));
    ASSERT_TRUE(isAlmostEqual(Cd, C_expected, 1e-10));
    ASSERT_TRUE(isAlmostEqual(Dd, D_expected, 1e-10));
}

/* // TODO
TEST(System, discretizeZOH) {
    DTLTISystem<5, 2, 3> discrete =
        continuous.discretize(0.001, DiscretizationMethod::ZOH);

    auto Ad = discrete.A;
    auto Bd = discrete.B;
    auto Cd = discrete.C;
    auto Dd = discrete.D;

    cout << "Ad = " << Ad << endl;
    cout << "Bd = " << Bd << endl;
    cout << "Cd = " << Cd << endl;
    cout << "Dd = " << Dd << endl;

    Matrix<5, 5> A_expected = {{
        {
            0.99853367472732302,
            -0.00249600331096629,
            -0.00355053078743334,
            -0.00557949339373221,
            -0.00762618664598806,
        },
        {
            0.01275123990328030,
            1.01486779762512658,
            0.01908815184790494,
            0.02120039750644017,
            0.02537619980557108,
        },
        {
            0.03253922255304589,
            0.03478319805502310,
            1.04124008504603816,
            0.04546592323575886,
            0.04782406044540538,
        },
        {
            0.05248948578915771,
            0.05886599056850944,
            0.06558151254439702,
            1.06793597623137493,
            0.07449409043927935,
        },
        {
            0.07836418488789647,
            0.08086964042652471,
            0.08782971201402996,
            0.09229826214015921,
            1.09904349221119246,
        },
    }};
    Matrix<5, 2> B_expected = {{
        {
            2.92157159229440877,
            2.92749563562985493,
        },
        {
            3.29343611873385456,
            3.31982224727515796,
        },
        {
            3.64928587881744715,
            3.65614833641953263,
        },
        {
            3.99806236383229585,
            4.00147325295223677,
        },
        {
            4.34431458940090653,
            4.35225390515593169,
        },
    }};
    Matrix<3, 5> C_expected = {{
        {
            6141.05854318043475359,
            6179.59930805368549045,
            6247.48522812608916865,
            6282.97229707914084429,
            6335.29271742370292486,
        },
        {
            6316.22176521723122278,
            6357.80758486977538269,
            6433.69059575417850283,
            6472.14370892974875460,
            6536.00122774003466475,
        },
        {
            6506.50333074448008119,
            6549.21705536704757833,
            6639.25501849113788921,
            6676.74950316508329706,
            6748.25570458681795571,
        },
    }};
    Matrix<3, 2> D_expected = {{
        {
            52197.12520761279301951,
            52345.91448038077214733,
        },
        {
            53866.98288840628811158,
            54017.96427148466318613,
        },
        {
            55677.60376946142787347,
            55833.10238284583465429,
        },
    }};

    ASSERT_TRUE(isAlmostEqual(Ad, A_expected, 1e-10));
    ASSERT_TRUE(isAlmostEqual(Bd, B_expected, 1e-10));
    ASSERT_TRUE(isAlmostEqual(Cd, C_expected, 1e-10));
    ASSERT_TRUE(isAlmostEqual(Dd, D_expected, 1e-10));
}
*/